public HttpResponseMessage Post([FromBody] Models.Company c) {
            var header = Request.Headers;

            if (header.Contains("authost")){
                string auth = header.GetValues("authost").First();

                if (auth.Equals(ConfigurationManager.AppSettings["tokenAuth"].ToString())) {
                    MySqlConnection conexao = new MySqlConnection(ConfigurationManager.ConnectionStrings["conConf"].ConnectionString);
                    MySqlCommand command = new MySqlCommand(Models.Global.createCompany, conexao);

                    conexao.Open();

                    command.Parameters.AddWithValue("@name", c.name);
                    command.Parameters.AddWithValue("@email", c.email);
                    command.Parameters.AddWithValue("@pass", Models.Global.cryptoConvert(c.pass));
                    command.Parameters.AddWithValue("@subscriber_email", c.subscriber_email);
                    command.Parameters.AddWithValue("@social", c.social);
                    command.Parameters.AddWithValue("@id_number", c.id_number);
                    command.Parameters.AddWithValue("@pf_pj", c.pf_pj);
                    command.Parameters.AddWithValue("@address", c.address);
                    command.Parameters.AddWithValue("@address_extra", c.address_extra);
                    command.Parameters.AddWithValue("@city", c.city);
                    command.Parameters.AddWithValue("@state", c.state);
                    command.Parameters.AddWithValue("@phone_number", c.phone_number);
                    command.Parameters.AddWithValue("@phone_number_extra", c.phone_number_extra);
                    command.Parameters.AddWithValue("@active", c.active);

                    if (command.ExecuteNonQuery() != 0)
                    {
                        conexao.Close();
                        return Request.CreateResponse(System.Net.HttpStatusCode.OK, "ok");
                    }
                    else
                    {
                        conexao.Close();
                        return Request.CreateResponse(System.Net.HttpStatusCode.BadRequest, "Error");
                    }
                }
            }else {
                return Request.CreateResponse(System.Net.HttpStatusCode.Unauthorized, "Acesso não autorizado");
            }
            return Request.CreateResponse(System.Net.HttpStatusCode.Forbidden, "Requisição sem token");
        }